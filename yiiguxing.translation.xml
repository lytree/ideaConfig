<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="684" />
    <option name="newTranslationDialogY" value="440" />
    <histories>
      <item value="A channel that sends Messages to each of its subscribers. Author: Mark Fisher, Oleg Zhurakousky, Gary Russell, Artem Bilan, Trung Pham" />
      <item value="Simple contract for handling a Message." />
      <item value="Defines methods for sending messages." />
      <item value="A message implementation that is produced by an advice after successful message handling. Contains the result of the expression evaluation in the payload and the original message that the advice passed to the handler." />
      <item value="ChannelOutboundHandlerAdapter which encodes message in a stream-like fashion from one message to an ByteBuf. Example implementation which encodes Integers to a ByteBuf. public class IntegerEncoder extends MessageToByteEncoder&lt;Integer&gt; { @Override public void encode(ChannelHandlerContext ctx, Integer msg, ByteBuf out) throws Exception { out.writeInt(msg); } }" />
      <item value="An encoder that prepends the length of the message. The length value is prepended as a binary form. For example, LengthFieldPrepender(2) will encode the following 12-bytes string: +----------------+ | &quot;HELLO, WORLD&quot; | +----------------+ into the following: +--------+----------------+ + 0x000C | &quot;HELLO, WORLD&quot; | +--------+----------------+ If you turned on the lengthIncludesLengthFieldLength flag in the constructor, the encoded data would look like the following (12 (original data) + 2 (prepended data) = 14 (0xE)): +--------+----------------+ + 0x000E | &quot;HELLO, WORLD&quot; | +--------+----------------+" />
      <item value="daemon" />
      <item value="The method {@link setScale(int, RoundingMode)} should be used in preference to this legacy method." />
      <item value="Returns a {@code BigDecimal} whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this {@code BigDecimal}'s unscaled value by the appropriate power of ten to maintain its overall value. If the scale is reduced by the operation, the unscaled value must be divided (rather than multiplied), and the value may be changed; in this case, the specified rounding mode is applied to the division. @apiNote Since BigDecimal objects are immutable, calls of this method do &lt;em&gt;not&lt;em&gt; result in the original object being modified, contrary to the usual convention of having methods named &lt;code&gt;set&lt;i&gt;X&lt;i&gt;&lt;code&gt; mutate field &lt;i&gt;{@code X}&lt;i&gt;. Instead, {@code setScale} returns an object with the proper scale; the returned object may or may not be newly allocated. @deprecated The method {@link setScale(int, RoundingMode)} should be used in preference to this legacy method. @param newScale scale of the {@code BigDecimal} value to be returned. @param roundingMode The rounding mode to apply. @return a {@code BigDecimal} whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this {@code BigDecimal}'s unscaled value by the appropriate power of ten to maintain its overall value. @throws ArithmeticException if {@code roundingMode==ROUND_UNNECESSARY} and the specified scaling operation would require rounding. @throws IllegalArgumentException if {@code roundingMode} does not represent a valid rounding mode. @see ROUND_UP @see ROUND_DOWN @see ROUND_CEILING @see ROUND_FLOOR @see ROUND_HALF_UP @see ROUND_HALF_DOWN @see ROUND_HALF_EVEN @see ROUND_UNNECESSARY" />
      <item value="The annotated element must be {@code null}. Accepts any type." />
      <item value="Returns the minimum value in an array." />
      <item value="the minimum value in the array" />
      <item value="an array, must not be null or empty" />
      <item value="Provides IEEE-754r variants of NumberUtils methods." />
      <item value="Provides extra functionality for Java Number classes." />
      <item value="&lt;p&gt;&lt;b&gt;Date Validation&lt;b&gt; and Conversion routines (&lt;code&gt;java.util.Date&lt;code&gt;).&lt;p&gt; &lt;p&gt;This validator provides a number of methods for validatingconverting a &lt;code&gt;String&lt;code&gt; date value to a &lt;code&gt;java.util.Date&lt;code&gt; using &lt;code&gt;java.text.DateFormat&lt;code&gt; to parse either:&lt;p&gt; &lt;ul&gt; &lt;li&gt;using the default format for the default &lt;code&gt;Locale&lt;code&gt;&lt;li&gt; &lt;li&gt;using a specified pattern with the default &lt;code&gt;Locale&lt;code&gt;&lt;li&gt; &lt;li&gt;using the default format for a specified &lt;code&gt;Locale&lt;code&gt;&lt;li&gt; &lt;li&gt;using a specified pattern with a specified &lt;code&gt;Locale&lt;code&gt;&lt;li&gt; &lt;ul&gt; &lt;p&gt;For each of the above mechanisms, conversion method (i.e the &lt;code&gt;validate&lt;code&gt; methods) implementations are provided which either use the default &lt;code&gt;TimeZone&lt;code&gt; or allow the &lt;code&gt;TimeZone&lt;code&gt; to be specified.&lt;p&gt; &lt;p&gt;Use one of the &lt;code&gt;isValid()&lt;code&gt; methods to just validate or one of the &lt;code&gt;validate()&lt;code&gt; methods to validate and receive a &lt;i&gt;converted&lt;i&gt; &lt;code&gt;Date&lt;code&gt; value.&lt;p&gt; &lt;p&gt;Implementations of the &lt;code&gt;validate()&lt;code&gt; method are provided to create &lt;code&gt;Date&lt;code&gt; objects for different &lt;i&gt;time zones&lt;i&gt; if the system default is not appropriate.&lt;p&gt; &lt;p&gt;Once a value has been successfully converted the following methods can be used to perform various date comparison checks:&lt;p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;compareDates()&lt;code&gt; compares the day, month and year of two dates, returning 0, -1 or +1 indicating whether the first date is equal, before or after the second.&lt;li&gt; &lt;li&gt;&lt;code&gt;compareWeeks()&lt;code&gt; compares the week and year of two dates, returning 0, -1 or +1 indicating whether the first week is equal, before or after the second.&lt;li&gt; &lt;li&gt;&lt;code&gt;compareMonths()&lt;code&gt; compares the month and year of two dates, returning 0, -1 or +1 indicating whether the first month is equal, before or after the second.&lt;li&gt; &lt;li&gt;&lt;code&gt;compareQuarters()&lt;code&gt; compares the quarter and year of two dates, returning 0, -1 or +1 indicating whether the first quarter is equal, before or after the second.&lt;li&gt; &lt;li&gt;&lt;code&gt;compareYears()&lt;code&gt; compares the year of two dates, returning 0, -1 or +1 indicating whether the first year is equal, before or after the second.&lt;li&gt; &lt;ul&gt; &lt;p&gt;So that the same mechanism used for parsing an &lt;i&gt;input&lt;i&gt; value for validation can be used to format &lt;i&gt;output&lt;i&gt;, corresponding &lt;code&gt;format()&lt;code&gt; methods are also provided. That is you can format either:&lt;p&gt; &lt;ul&gt; &lt;li&gt;using a specified pattern&lt;li&gt; &lt;li&gt;using the format for a specified &lt;code&gt;Locale&lt;code&gt;&lt;li&gt; &lt;li&gt;using the format for the &lt;i&gt;default&lt;i&gt; &lt;code&gt;Locale&lt;code&gt;&lt;li&gt; &lt;ul&gt; @version Revision" />
      <item value="&lt;p&gt;{@code Fraction} is a {@code Number} implementation that stores fractions accurately.&lt;p&gt; &lt;p&gt;This class is immutable, and interoperable with most methods that accept a {@code Number}.&lt;p&gt; &lt;p&gt;Note that this class is intended for common use cases, it is &lt;i&gt;int&lt;i&gt; based and thus suffers from various overflow issues. For a BigInteger based equivalent, please see the Commons Math BigFraction class. &lt;p&gt;" />
      <item value="More specifically, this method returns {@code true} if the {@code String} is not {@code null}, its length is greater than 0, and it contains at least one non-whitespace character." />
      <item value="More specifically, this method returns {@code true} if the" />
      <item value="Check whether the given {@code String} contains actual &lt;em&gt;text&lt;em&gt;." />
      <item value="the given {@code charset} or the default Charset if {@code charset} is null." />
      <item value="Returns the given {@code charset} or the default Charset if {@code charset} is null." />
      <item value="a Charset or null." />
      <item value="Thrown if {@link StandardCharsetsUTF_8} is not initialized, which should never happen since it is required by the Java platform specification." />
      <item value="encoded bytes, or {@code null} if the input string was {@code null}" />
      <item value="string the String to encode, may be {@code null}" />
      <item value="Encodes the given string into a byte buffer using the UTF-8 charset, storing the result into a new byte array." />
      <item value="Random Utils.next Float(start,end)" />
      <item value="ShouldNeverHappenException class." />
      <item value="Constructor for TcpSlave. Params: port – a int. encapsulated – a boolean." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the UTF-8 charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the UTF-16LE charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the UTF-16BE charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the UTF-16 charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the US-ASCII charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the ISO-8859-1 charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the given charset." />
      <item value="Constructs a new {@code String} by decoding the specified array of bytes using the given charset" />
      <item value="Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte array." />
      <item value="Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte array." />
      <item value="Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte array" />
      <item value="Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte array." />
      <item value="Thrown if {@link StandardCharsetsUS_ASCII} is not initialized, which should never happen since it is required by the Java platform specification." />
      <item value="Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte array." />
      <item value="IllegalStateException Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a required charset name." />
      <item value="the String to encode, may be {@code null}" />
      <item value="The name of a required {@link java.nio.charset.Charset}" />
      <item value="method when the encoding is required to be in the JRE." />
      <item value="This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which should never happen for a required charset name." />
      <item value="Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte array." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="173" />
        <entry key="ENGLISH" value="173" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1657070503045" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190412000287251" />
      </app-key>
    </option>
    <option name="phoneticFontFamily" value="Source Code Pro Medium" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="targetLanguageSelection" value="PRIMARY_LANGUAGE" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3289501515931655" />
      </youdao-translate>
    </option>
  </component>
</application>