<application>
  <component name="AppStorage">
    <histories>
      <item value="Handling edge case: Joda-time can only handle up to year 292278993 but we are given 292278994; So we parse the date string by first adjusting the year to 292278993. Then we add 1 year back afterwards." />
      <item value="Returns the read limit for mark-and-reset during retries; or -1 if not available." />
      <item value="It is highly recommended to fix these problems because they threaten the stability of your build. For this reason, future Maven versions might no longer support building such malformed projects." />
      <item value="allow Circular References" />
      <item value="Eagerly caching bean 'linkMapper' to allow for resolving potential circular references" />
      <item value="is Singleton Currently In Creation" />
      <item value="Eagerly cache singletons to be able to resolve circular references even when triggered by lifecycle interfaces like BeanFactoryAware." />
      <item value="Add the given singleton factory for building the specified singleton if necessary. To be called for eager registration of singletons, e.g. to be able to resolve circular references. Params: beanName – the name of the bean singletonFactory – the factory for the singleton object" />
      <item value="Simple implementation of the {@link ApplicationEventMulticaster} interface. &lt;p&gt;Multicasts all events to all registered listeners, leaving it up to the listeners to ignore events that they are not interested in. Listeners will usually perform corresponding {@code instanceof} checks on the passed-in event object. &lt;p&gt;By default, all listeners are invoked in the calling thread. This allows the danger of a rogue listener blocking the entire application, but adds minimal overhead. Specify an alternative task executor to have listeners executed in different threads, for example from a thread pool." />
      <item value="Propagate refresh to lifecycle processor first." />
      <item value="{@link BeanFactoryPostProcessor} used for bootstrapping processing of {@link Configuration @Configuration} classes. &lt;p&gt;Registered by default when using {@code &lt;context:annotation-config&gt;} or {@code &lt;context:component-scan&gt;}. Otherwise, may be declared manually as with any other {@link BeanFactoryPostProcessor}. &lt;p&gt;This post processor is priority-ordered as it is important that any {@link Bean @Bean} methods declared in {@code @Configuration} classes have their corresponding bean definitions registered before any other {@code BeanFactoryPostProcessor} executes." />
      <item value="registry Processors" />
      <item value="regular Post Processors" />
      <item value="Tell the subclass to refresh the internal bean factory." />
      <item value="Flag that indicates whether this context has been closed already." />
      <item value="Step recording metrics about a particular phase or action happening during the {@link ApplicationStartup}. &lt;p&gt;The lifecycle of a {@code StartupStep} goes as follows: &lt;ol&gt; &lt;li&gt;the step is created and starts by calling {@link ApplicationStartupstart(String) the application startup} and is assigned a unique {@link StartupStepgetId() id}. &lt;li&gt;we can then attach information with {@link Tags} during processing &lt;li&gt;we then need to mark the {@link end()} of the step &lt;ol&gt; &lt;p&gt;Implementations can track the &quot;execution time&quot; or other metrics for steps." />
      <item value="Prepare this context for refreshing" />
      <item value="Create proxy if we have advice" />
      <item value="Specifies which types are eligible for component scanning. Further narrows the set of candidate components from everything in basePackages() to everything in the base packages that matches the given filter or filters" />
      <item value="Alias for the basePackages() attribute. Allows for more concise annotation declarations e.g.: @EnableJdbcRepositories(&quot;org.my.pkg&quot;) instead of @EnableJdbcRepositories(basePackages=&quot;org.my.pkg&quot;)." />
      <item value="Base packages to scan for annotated components. value() is an alias for (and mutually exclusive with) this attribute. Use basePackageClasses() for a type-safe alternative to String-based package names." />
      <item value="pecifies which types are not eligible for component scanning." />
      <item value="Encapsulates a Java {@link java.lang.reflect.Type}, providing access to {@link getSuperType() supertypes}, {@link getInterfaces() interfaces}, and {@link getGeneric(int...) generic parameters} along with the ability to ultimately {@link resolve() resolve} to a {@link java.lang.Class}. &lt;p&gt;{@code ResolvableTypes} may be obtained from {@link forField(Field) fields}, {@link forMethodParameter(Method, int) method parameters}, {@link forMethodReturnType(Method) method returns} or {@link forClass(Class) classes}. Most methods on this class will themselves return {@link ResolvableType ResolvableTypes}, allowing easy navigation. For example: &lt;pre class=&quot;code&quot;&gt; private HashMap&amp;lt;Integer, List&amp;lt;String&amp;gt;&amp;gt; myMap; public void example() { ResolvableType t = ResolvableType.forField(getClass().getDeclaredField(&quot;myMap&quot;)); t.getSuperType(); AbstractMap&amp;lt;Integer, List&amp;lt;String&amp;gt;&amp;gt; t.asMap(); Map&amp;lt;Integer, List&amp;lt;String&amp;gt;&amp;gt; t.getGeneric(0).resolve(); Integer t.getGeneric(1).resolve(); List t.getGeneric(1); List&amp;lt;String&amp;gt; t.resolveGeneric(1, 0); String } &lt;pre&gt;" />
      <item value="A BeanDefinition describes a bean instance, which has property values, constructor argument values, and further information supplied by concrete implementations. This is just a minimal interface: The main intention is to allow a BeanFactoryPostProcessor to introspect and modify property values and other bean metadata." />
      <item value="Instruments the application startup phase using steps. The core container and its infrastructure components can use the ApplicationStartup to mark steps during the application startup and collect data about the execution context or their processing time." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="26" />
        <entry key="ENGLISH" value="26" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1646919113798" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190412000287251" />
      </app-key>
    </option>
    <option name="phoneticFontFamily" value="Source Code Pro Medium" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="3289501515931655" />
      </youdao-translate>
    </option>
  </component>
</application>